# Generated by Django 2.0.1 on 2018-01-12 22:23

import ckeditor.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import stdimage.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-posta Adresi')),
                ('gender', models.CharField(blank=True, choices=[('B', 'Belirtilmemiş'), ('E', 'Erkek'), ('K', 'Kadın')], default='B', max_length=1, null=True, verbose_name='Cinsiyet')),
                ('photo', stdimage.models.StdImageField(blank=True, upload_to='user-images', verbose_name='Profil Fotoğrafı')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Doğum Tarihi')),
                ('location', models.CharField(blank=True, max_length=255, verbose_name='Yaşadığınız Yer')),
                ('about_us', ckeditor.fields.RichTextField(blank=True, verbose_name='Hakkınızda')),
                ('website', models.URLField(blank=True, verbose_name='Website Adresi')),
                ('facebook', models.URLField(blank=True, max_length=255, verbose_name='Facebook Profil Adresi')),
                ('twitter', models.URLField(blank=True, max_length=255, verbose_name='Twitter Profil Adresi')),
                ('google_plus', models.URLField(blank=True, max_length=255, verbose_name='Google+ Profil Adresi')),
                ('youtube', models.URLField(blank=True, max_length=255, verbose_name='Youtube Profil Adresi')),
                ('linkedin', models.URLField(blank=True, max_length=255, verbose_name='Linkedin Profil Adresi')),
                ('instagram', models.CharField(blank=True, max_length=255, verbose_name='İnstagram Kullanıcı Adı')),
                ('views', models.IntegerField(default=0, editable=False, verbose_name='Görüntülenme')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Üye Bilgisi',
                'verbose_name_plural': 'Üye Bilgileri',
                'db_table': 'uye_bilgileri',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
